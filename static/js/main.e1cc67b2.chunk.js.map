{"version":3,"sources":["data.js","components/UserDropdown.js","components/App.js","serviceWorker.js","index.js"],"names":["claimData","slas","status","hours","claims","id","claimant","assignedTo","createdAt","updatedAt","menu","userList","setCurrentUser","onClick","e","item","node","innerText","map","user","i","Item","key","icon","UserOutlined","UserDropdown","props","userData","userState","currentUser","overlay","DownOutlined","App","useState","setUserList","useEffect","newUserList","claim","Set","sortListWithSLA","SlaExceeded","updatedTime","Date","parse","amountExceeded","slaExceeded","sla","toFixed","calculateSlaExceeded","sort","a","b","parseFloat","className","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e1cc67b2.chunk.js","sourcesContent":["const claimData = {\n  slas: [\n    {\n      status: \"received\",\n      hours: 48,\n    },\n    {\n      status: \"awaiting_action\",\n      hours: 72,\n    },\n  ],\n  claims: [\n    {\n      id: 1,\n      claimant: \"Skylar Dean\",\n      assignedTo: \"John Smith\",\n      status: \"received\",\n      createdAt: \"2020-08-09T00:00:00.000Z\",\n      updatedAt: \"2020-08-09T00:00:00.000Z\",\n    },\n    {\n      id: 2,\n      claimant: \"Amber Green\",\n      assignedTo: \"John Smith\",\n      status: \"awaiting_action\",\n      createdAt: \"2020-08-12T00:00:00.000Z\",\n      updatedAt: \"2020-08-13T00:00:00.000Z\",\n    },\n    {\n      id: 3,\n      claimant: \"Ross James\",\n      assignedTo: \"John Smith\",\n      status: \"received\",\n      createdAt: \"2020-08-05T00:00:00.000Z\",\n      updatedAt: \"2020-08-05T00:00:00.000Z\",\n    },\n    {\n      id: 4,\n      claimant: \"Kim Jones\",\n      assignedTo: \"John Smith\",\n      status: \"awaiting_action\",\n      createdAt: \"2020-08-15T00:00:00.000Z\",\n      updatedAt: \"2020-08-15T00:00:00.000Z\",\n    },\n    {\n      id: 5,\n      claimant: \"Henry Wong\",\n      assignedTo: \"Michael Pool\",\n      status: \"received\",\n      createdAt: \"2020-08-18T00:00:00.000Z\",\n      updatedAt: \"2020-08-18T00:00:00.000Z\",\n    },\n    {\n      id: 6,\n      claimant: \"James Lee\",\n      assignedTo: \"Michael Pool\",\n      status: \"awaiting_action\",\n      createdAt: \"2020-08-10T00:00:00.000Z\",\n      updatedAt: \"2020-08-13T00:00:00.000Z\",\n    },\n    {\n      id: 7,\n      claimant: \"Skylar Dean\",\n      assignedTo: \"John Smith\",\n      status: \"received\",\n      createdAt: \"2020-08-01T00:00:00.000Z\",\n      updatedAt: \"2020-08-03T00:00:00.000Z\",\n    },\n    {\n      id: 8,\n      claimant: \"Amber Green\",\n      assignedTo: \"Michael Pool\",\n      status: \"rejected\",\n      createdAt: \"2020-08-02T00:00:00.000Z\",\n      updatedAt: \"2020-08-02T00:00:00.000Z\",\n    },\n  ],\n};\n\nexport default claimData;\n","import React, { useEffect } from \"react\";\nimport { Menu, Dropdown, Button } from \"antd\";\nimport { DownOutlined, UserOutlined } from \"@ant-design/icons\";\n\nconst menu = (userList, setCurrentUser) => {\n  function handleMenuClick(e) {\n    setCurrentUser(e.item.node.innerText);\n  }\n\n  return (\n    <Menu onClick={handleMenuClick}>\n      {userList.map((user, i) => (\n        <Menu.Item key={i} icon={<UserOutlined />}>\n          {user}\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n};\n\nconst UserDropdown = (props) => {\n  const { userList } = props.userData;\n  const { currentUser, setCurrentUser } = props.userState;\n  // in props.something.currentAssessor\n  // whichever is the first user in the dropdown list, make it currentAssessor in parent state\n  // on useEffect first render on this component, setCurrentAssessor to first one in list.\n  // After, whenever a user from dropdown button is clicked, this should setCurrentAssessor from parent state\n\n  return (\n    <Dropdown overlay={menu(userList, setCurrentUser)}>\n      <Button>\n        {currentUser ? currentUser : \"User List\"} <DownOutlined />\n      </Button>\n    </Dropdown>\n  );\n};\n\nexport default UserDropdown;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport claimData from \"../data\";\nimport UserDropdown from \"./UserDropdown\";\n\nfunction App() {\n  const [userList, setUserList] = useState([]);\n  const [currentUser, setCurrentUser] = useState(\"\");\n  // state, setState: currentUser\n\n  useEffect(() => {\n    let newUserList = claimData.claims.map((claim) => {\n      return claim.assignedTo;\n    });\n    newUserList = [...new Set(newUserList)];\n    setUserList(newUserList);\n  }, []);\n\n  const calculateSlaExceeded = (updatedAt, status) => {\n    const { slas } = claimData;\n    let updatedTime = Date.parse(updatedAt);\n    let current = Date.parse(new Date());\n    let amountExceeded = (current - updatedTime) / 1000 / 60 / 60;\n    let slaExceeded = 0;\n\n    slas.map((sla) => {\n      if (sla.status === status) {\n        slaExceeded = amountExceeded - sla.hours;\n      }\n    });\n\n    return slaExceeded.toFixed(2);\n  };\n\n  // const unsortedListWithSLA = () => {\n  //   const { claims } = claimData;\n  //   claims.map((claim) => {\n  //     claim.SlaExceeded = calculateSlaExceeded(claim.updatedAt, claim.status);\n  //   });\n  //   console.log(claims);\n  //   return claims;\n  // };\n\n  // const sortedListWithSLA = () => {\n  //   return unsortedListWithSLA().sort(\n  //     (a, b) => parseFloat(b.SlaExceeded) - parseFloat(a.SlaExceeded)\n  //   );\n  // };\n\n  const sortListWithSLA = () => {\n    const { claims } = claimData;\n    claims.map((claim) => {\n      claim.SlaExceeded = calculateSlaExceeded(claim.updatedAt, claim.status);\n    });\n    let sortedList = claims.sort(\n      (a, b) => parseFloat(b.SlaExceeded) - parseFloat(a.SlaExceeded)\n    );\n    return sortedList;\n  };\n\n  const claimsList = () => {\n    if (!currentUser) {\n      return sortListWithSLA();\n    } else {\n      return sortListWithSLA().filter((claim) => {\n        return claim.assignedTo === currentUser;\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <UserDropdown\n        userData={{ userList }}\n        userState={{ currentUser, setCurrentUser }}\n      />\n      {/* Userdropdown, will take currentAssessor state and set state */}\n      <h1>Dashboard</h1>\n\n      <div className=\"claims\">\n        <table>\n          <tr>\n            <th>ID</th>\n            <th>claimant</th>\n            <th>assignedTo</th>\n            <th>status</th>\n            <th>createdAt</th>\n            <th>updatedAt</th>\n            <th>SLA Exceeded</th>\n          </tr>\n          {claimsList().map((claim) => (\n            <tr>\n              <td>{claim.id}</td>\n              <td>{claim.claimant}</td>\n              <td>{claim.assignedTo}</td>\n              <td>{claim.status}</td>\n              <td>{claim.createdAt}</td>\n              <td>{claim.updatedAt}</td>\n              <td>{claim.SlaExceeded}</td>\n            </tr>\n          ))}\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App.js\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}